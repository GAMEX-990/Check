import { doc, getDoc, collection, getDocs } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { exportMonthlyAttendanceToXLSX } from './exportToXLSX';
import { AttendanceRecord, ClassData } from '@/types/handleExportXLSX';
import { toast } from 'sonner';

interface ExtendedUserData {
  uid: string;
  name: string;
  studentId: string;
  timestamp: Date;
  status?: string;
  isLate?: boolean | string;
  sessionStartTime?: Date; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° session
}

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á function ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö getFingerprint.ts
const calculateAttendanceStatus = (
  checkInTime: Date,
  sessionStartTime: Date
): {
  present: boolean;
  late: boolean;
  status: 'present' | 'late' | 'absent';
} => {
  const timeDiffMs = checkInTime.getTime() - sessionStartTime.getTime();
  
  // ‡πÉ‡∏ä‡πâ constants ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö getFingerprint.ts
  const LATE_THRESHOLD_MS = 15 * 60 * 1000; // 15 ‡∏ô‡∏≤‡∏ó‡∏µ
  const ABSENT_THRESHOLD_MS = 3 * 60 * 60 * 1000; // 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  
  console.log(`üìä Calculating status:`, {
    checkInTime: checkInTime.toLocaleTimeString(),
    sessionStartTime: sessionStartTime.toLocaleTimeString(),
    timeDiffMs,
    timeDiffMinutes: Math.round(timeDiffMs / (1000 * 60)),
    lateThreshold: LATE_THRESHOLD_MS,
    absentThreshold: ABSENT_THRESHOLD_MS
  });

  if (timeDiffMs > ABSENT_THRESHOLD_MS) {
    // ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á = ‡∏Ç‡∏≤‡∏î
    return {
      present: false,
      late: false,
      status: 'absent'
    };
  } else if (timeDiffMs > LATE_THRESHOLD_MS) {
    // ‡πÄ‡∏Å‡∏¥‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á = ‡∏™‡∏≤‡∏¢
    return {
      present: true,
      late: true,
      status: 'late'
    };
  } else {
    // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ = ‡∏°‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    return {
      present: true,
      late: false,
      status: 'present'
    };
  }
};

// ‚úÖ Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ session start time ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
const getSessionStartTimeForDate = (
  dailyCheckedInRecord: any,
  dateKey: string
): Date | null => {
  const dayRecord = dailyCheckedInRecord[dateKey];
  if (!dayRecord) return null;

  // ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤ check-in ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô = session start time
  let earliestTime: Date | null = null;
  
  Object.values(dayRecord).forEach((record: any) => {
    if (record && record.timestamp && typeof record.timestamp.toDate === 'function') {
      const checkInTime = record.timestamp.toDate();
      if (!earliestTime || checkInTime < earliestTime) {
        earliestTime = checkInTime;
      }
    }
  });
  
  return earliestTime;
};

// ‚úÖ Function ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firebase ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
const processFirebaseAttendanceData = (
  studentId: string,
  name: string,
  checkInTime: Date,
  sessionStartTime: Date,
  originalStatus?: string,
  originalIsLate?: boolean | string
): {
  present: boolean;
  late: boolean;
  status: 'present' | 'late' | 'absent';
} => {
  
  console.log(`üîç Processing ${studentId}:`, {
    name,
    checkInTime: checkInTime.toLocaleTimeString(),
    sessionStartTime: sessionStartTime.toLocaleTimeString(),
    originalStatus,
    originalIsLate,
    originalIsLateType: typeof originalIsLate
  });

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• originalStatus ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
  if (originalStatus === 'late' || originalIsLate === true || originalIsLate === '!' || originalIsLate === 'true') {
    console.log(`‚úÖ Using original status: LATE`);
    return {
      present: true,
      late: true,
      status: 'late'
    };
  }
  
  if (originalStatus === 'absent') {
    console.log(`‚úÖ Using original status: ABSENT`);
    return {
      present: false,
      late: false,
      status: 'absent'
    };
  }
  
  if (originalStatus === 'present' || originalIsLate === false || originalIsLate === '‚úì' || originalIsLate === 'false') {
    console.log(`‚úÖ Using original status: PRESENT`);
    return {
      present: true,
      late: false,
      status: 'present'
    };
  }

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
  console.log(`üßÆ Calculating from time difference...`);
  return calculateAttendanceStatus(checkInTime, sessionStartTime);
};

export const handleExportXLSX = async (
  classId: string,
  currentUser: { uid: string } | null
): Promise<void> => {
  try {
    if (!currentUser) {
      toast.error('‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô');
      return;
    }

    console.log(`üöÄ Starting export for class: ${classId}`);

    const classRef = doc(db, 'classes', classId);
    const classSnap = await getDoc(classRef);

    if (!classSnap.exists()) {
      toast.error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏™‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      return;
    }

    const classDataFromDB = classSnap.data();

    if (classDataFromDB.created_by !== currentUser.uid) {
      toast.error('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ');
      return;
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const studentsRef = collection(classRef, 'students');
    const studentsSnap = await getDocs(studentsRef);
    const allStudentsMap: Record<string, { studentId: string; name: string }> = {};

    studentsSnap.forEach(docSnap => {
      const data = docSnap.data();
      if (data.studentId && data.name) {
        allStudentsMap[data.studentId] = {
          studentId: data.studentId,
          name: data.name
        };
      }
    });

    console.log(`üë• Found ${Object.keys(allStudentsMap).length} students:`, Object.keys(allStudentsMap));

    const classData: ClassData = {
      name: classDataFromDB.name || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™',
      checkedInCount: classDataFromDB.checkedInCount || 0
    };

    const dailyCheckedInRecord = classDataFromDB.dailyCheckedInRecord || {};
    console.log(`üìÖ Daily records available:`, Object.keys(dailyCheckedInRecord));

    // ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const attendanceData: AttendanceRecord = {};
    const dateSet = new Set<string>();

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    Object.keys(allStudentsMap).forEach(studentId => {
      attendanceData[studentId] = {
        name: allStudentsMap[studentId].name,
        attendance: {}
      };
    });

    // ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
    Object.keys(dailyCheckedInRecord).forEach(dateKey => {
      console.log(`\nüìÜ Processing date: ${dateKey}`);
      
      // ‡∏´‡∏≤ session start time ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      const sessionStartTime = getSessionStartTimeForDate(dailyCheckedInRecord, dateKey);
      if (!sessionStartTime) {
        console.warn(`‚ö†Ô∏è No session start time found for ${dateKey}`);
        return;
      }

      console.log(`üïê Session started at: ${sessionStartTime.toLocaleTimeString()}`);

      const dayRecord = dailyCheckedInRecord[dateKey];
      const dd = sessionStartTime.getDate().toString().padStart(2, '0');
      const mm = (sessionStartTime.getMonth() + 1).toString().padStart(2, '0');
      const dateStr = `${dd}/${mm}`;
      
      dateSet.add(dateStr);

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£ check-in ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      Object.values(dayRecord).forEach((record: any) => {
        if (!record || !record.timestamp || typeof record.timestamp.toDate !== 'function') {
          return;
        }

        const studentId = record.studentId;
        if (!studentId || !allStudentsMap[studentId]) {
          console.warn(`‚ö†Ô∏è Unknown student: ${studentId}`);
          return;
        }

        const checkInTime = record.timestamp.toDate();
        
        // ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ logic ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        const processedStatus = processFirebaseAttendanceData(
          studentId,
          allStudentsMap[studentId].name,
          checkInTime,
          sessionStartTime,
          record.status,
          record.isLate
        );

        console.log(`‚úÖ Final result for ${studentId} on ${dateStr}:`, {
          processedStatus,
          willShowInExcel: processedStatus.present ? (processedStatus.late ? '!' : '‚úì') : 'X'
        });

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        attendanceData[studentId].attendance[dateStr] = {
          present: processedStatus.present,
          late: processedStatus.late
        };
      });
    });

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "‡∏Ç‡∏≤‡∏î" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ check-in
    const allStudentIds = Object.keys(allStudentsMap);
    dateSet.forEach(date => {
      allStudentIds.forEach(studentId => {
        if (!attendanceData[studentId].attendance[date]) {
          console.log(`‚ùå ${studentId} was absent on ${date}`);
          attendanceData[studentId].attendance[date] = {
            present: false,
            late: false
          };
        }
      });
    });

    if (dateSet.size === 0) {
      toast.error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ');
      return;
    }

    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const dateList = Array.from(dateSet).sort((a, b) => {
      const [d1, m1] = a.split('/').map(Number);
      const [d2, m2] = b.split('/').map(Number);
      return m1 === m2 ? d1 - d2 : m1 - m2;
    });

    // ‚úÖ Final debug summary
    console.log('\nüéØ === FINAL ATTENDANCE SUMMARY ===');
    Object.entries(attendanceData).forEach(([studentId, student]) => {
      const dailySummary = dateList.map(date => {
        const record = student.attendance[date];
        const symbol = record.present ? (record.late ? '!' : '‚úì') : 'X';
        return `${date}:${symbol}`;
      }).join(' | ');
      
      console.log(`${studentId} (${student.name}): ${dailySummary}`);
    });
    console.log('=== END SUMMARY ===\n');

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á month label
    const allDates = Array.from(dateSet).map(dateStr => {
      const [dd, mm] = dateStr.split('/').map(Number);
      return new Date(new Date().getFullYear(), mm - 1, dd);
    }).sort((a, b) => a.getTime() - b.getTime());

    const earliestDate = allDates[0] || new Date();
    const monthsTH = [
      '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
      '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ];
    const monthLabel = `${monthsTH[earliestDate.getMonth()]} ${earliestDate.getFullYear() + 543}`;

    // ‚úÖ Export
    exportMonthlyAttendanceToXLSX(
      { name: classData.name, month: monthLabel },
      attendanceData,
      dateList
    );

    toast.success(`Export ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (${Object.keys(allStudentsMap).length} ‡∏Ñ‡∏ô, ${dateList.length} ‡∏ß‡∏±‡∏ô)`);
    
  } catch (err) {
    console.error('üí• Export error:', err);
    toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Export Excel');
  }
};

export const getAttendanceSummary = (
  attendanceData: AttendanceRecord,
  dateList: string[]
) => {
  const summary = {
    totalStudents: Object.keys(attendanceData).length,
    totalDays: dateList.length,
    presentCount: 0,
    lateCount: 0,
    absentCount: 0
  };

  Object.values(attendanceData).forEach(student => {
    dateList.forEach(date => {
      const record = student.attendance[date];
      if (record) {
        if (record.present) {
          if (record.late) {
            summary.lateCount++;
          } else {
            summary.presentCount++;
          }
        } else {
          summary.absentCount++;
        }
      } else {
        summary.absentCount++;
      }
    });
  });

  return summary;
};